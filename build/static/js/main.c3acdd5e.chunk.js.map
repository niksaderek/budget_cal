{"version":3,"sources":["App.js","index.js"],"names":["BudgetCalculator","budgetData","setBudgetData","useState","currentLifetimeBudget","currentSpend","currentEndDate","currentDailyBudget","newDailyBudget","newEndDate","newLifetimeBudget","changeInLTBudget","calculateValues","data","updatedData","undefined","currentDate","Date","endDate","daysRemaining","Math","ceil","Number","parseFloat","toFixed","handleInputChange","e","name","value","target","newValue","handleDateChange","dateValue","formattedDate","formatDate","dateString","date","getMonth","getDate","getFullYear","toInputDateFormat","parts","split","length","padStart","React","createElement","className","type","onChange","step","toLocaleString","minimumFractionDigits","maximumFractionDigits","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.c3acdd5e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst BudgetCalculator = () => {\r\n  const [budgetData, setBudgetData] = useState({\r\n    currentLifetimeBudget: 25000.00,\r\n    currentSpend: 5000.00,\r\n    currentEndDate: \"3/23/2025\",\r\n    currentDailyBudget: 2000.00,\r\n    newDailyBudget: 1500.00,\r\n    newEndDate: \"3/27/2025\",\r\n    newLifetimeBudget: 26000.00,\r\n    changeInLTBudget: 4.00\r\n  });\r\n\r\n  const calculateValues = (data) => {\r\n    const updatedData = { ...data };\r\n\r\n    if (data.currentLifetimeBudget !== undefined && data.currentSpend !== undefined && data.currentEndDate !== undefined) {\r\n      const currentDate = new Date();\r\n      const endDate = new Date(data.currentEndDate);\r\n      const daysRemaining = Math.ceil((endDate - currentDate) / (1000 * 60 * 60 * 24));\r\n      \r\n      if (daysRemaining > 0) {\r\n        updatedData.currentDailyBudget = (Number(data.currentLifetimeBudget) - Number(data.currentSpend)) / daysRemaining;\r\n        updatedData.currentDailyBudget = parseFloat(updatedData.currentDailyBudget.toFixed(2));\r\n      }\r\n    }\r\n\r\n    if (data.currentSpend !== undefined && data.newDailyBudget !== undefined && data.newEndDate !== undefined) {\r\n      const currentDate = new Date();\r\n      const endDate = new Date(data.newEndDate);\r\n      const daysRemaining = Math.ceil((endDate - currentDate) / (1000 * 60 * 60 * 24));\r\n      \r\n      if (daysRemaining > 0) {\r\n        updatedData.newLifetimeBudget = Number(data.currentSpend) + (Number(data.newDailyBudget) * daysRemaining);\r\n        updatedData.newLifetimeBudget = parseFloat(updatedData.newLifetimeBudget.toFixed(2));\r\n      }\r\n    }\r\n\r\n    if (data.currentLifetimeBudget > 0 && updatedData.newLifetimeBudget > 0) {\r\n      updatedData.changeInLTBudget = ((updatedData.newLifetimeBudget - data.currentLifetimeBudget) / data.currentLifetimeBudget) * 100;\r\n      updatedData.changeInLTBudget = parseFloat(updatedData.changeInLTBudget.toFixed(2));\r\n    }\r\n\r\n    return updatedData;\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const newValue = name === 'currentEndDate' || name === 'newEndDate' ? value : parseFloat(value) || 0;\r\n    \r\n    const updatedData = { ...budgetData, [name]: newValue };\r\n    setBudgetData(calculateValues(updatedData));\r\n  };\r\n\r\n  const handleDateChange = (name, dateValue) => {\r\n    const formattedDate = formatDate(dateValue);\r\n    const updatedData = { ...budgetData, [name]: formattedDate };\r\n    setBudgetData(calculateValues(updatedData));\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n  };\r\n\r\n  const toInputDateFormat = (dateString) => {\r\n    if (!dateString) return '';\r\n    const parts = dateString.split('/');\r\n    if (parts.length !== 3) return '';\r\n    return `${parts[2]}-${parts[0].padStart(2, '0')}-${parts[1].padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 max-w-7xl bg-white rounded-lg shadow-lg\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-6 text-blue-600\">Daily & Lifetime Budget Calculator</h1>\r\n      \r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full border-collapse bg-gray-50 shadow-sm rounded-lg\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">Current Lifetime Budget</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">Current Spend</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">Current End Date</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">Current Daily Budget</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">New Daily Budget</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">New End Date</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">New Lifetime Budget</th>\r\n              <th className=\"bg-blue-600 text-white font-semibold p-4 border-b\">Change in LT Budget</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr className=\"text-center\">\r\n              <td className=\"border p-4\">\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"currentLifetimeBudget\"\r\n                  value={budgetData.currentLifetimeBudget}\r\n                  onChange={handleInputChange}\r\n                  className=\"p-2 bg-gray-200 rounded w-full\"\r\n                  step=\"0.01\"\r\n                />\r\n              </td>\r\n              <td className=\"border p-4\">\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"currentSpend\"\r\n                  value={budgetData.currentSpend}\r\n                  onChange={handleInputChange}\r\n                  className=\"p-2 bg-gray-200 rounded w-full\"\r\n                  step=\"100\" // Change the step to 100\r\n                />\r\n              </td>\r\n              <td className=\"border p-4\">\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"currentEndDate\"\r\n                  value={toInputDateFormat(budgetData.currentEndDate)}\r\n                  onChange={(e) => handleDateChange('currentEndDate', e.target.value)}\r\n                  className=\"p-2 bg-gray-200 rounded w-full\"\r\n                />\r\n              </td>\r\n              <td className=\"border p-4 text-right font-semibold\">\r\n                ${budgetData.currentDailyBudget.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n              </td>\r\n              <td className=\"border p-4\">\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"newDailyBudget\"\r\n                  value={budgetData.newDailyBudget}\r\n                  onChange={handleInputChange}\r\n                  className=\"p-2 bg-gray-200 rounded w-full\"\r\n                  step=\"100\" // Change the step to 100\r\n                />\r\n              </td>\r\n              <td className=\"border p-4\">\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"newEndDate\"\r\n                  value={toInputDateFormat(budgetData.newEndDate)}\r\n                  onChange={(e) => handleDateChange('newEndDate', e.target.value)}\r\n                  className=\"p-2 bg-gray-200 rounded w-full\"\r\n                />\r\n              </td>\r\n              <td className=\"border p-4 text-right font-semibold\">\r\n                ${budgetData.newLifetimeBudget.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n              </td>\r\n              <td className=\"border p-4 text-right font-semibold\">\r\n                {budgetData.changeInLTBudget.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"mt-6 text-sm text-gray-600\">\r\n        <p>Input the gray fields. Bolded fields are calculated automatically.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetCalculator;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'; // Optional, for styles\r\nimport App from './App'; // Your main app component\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}